{"remainingRequest":"/home/nanouni/DilsaProject/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/nanouni/DilsaProject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nanouni/DilsaProject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nanouni/DilsaProject/src/components/Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"/home/nanouni/DilsaProject/src/components/Home.vue","mtime":1636134887699},{"path":"/home/nanouni/DilsaProject/node_modules/cache-loader/dist/cjs.js","mtime":1634074391745},{"path":"/home/nanouni/DilsaProject/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634074397369},{"path":"/home/nanouni/DilsaProject/node_modules/cache-loader/dist/cjs.js","mtime":1634074391745},{"path":"/home/nanouni/DilsaProject/node_modules/vue-loader/lib/index.js","mtime":1634074395921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJtYWluIiwgWwogICAgX2MoCiAgICAgICJuYXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAibmF2YmFyIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWRhcmsgZml4ZWQtdG9wIG5hdmJhci1zaHJpbmsiLAogICAgICAgIGF0dHJzOiB7IGlkOiAibWFpbk5hdiIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogIm5hdmJhclJlc3BvbnNpdmUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZiYXItbmF2IHRleHQtdXBwZXJjYXNlIG1zLWF1dG8gcHktNCBweS1sZy0wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiI3NlcnZpY2VzIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0uJHQoIlNlcnYiKSkpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiNwcm9kdWl0cyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLiR0KCJQcm9kIikpKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjYWJvdXQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS4kdCgiQWJ0IikpKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjdGVhbSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLiR0KCJUbSIpKSldCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiI2NvbnRhY3QiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS4kdCgiQ3RjIikpKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJ1bCIsCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJiLWRyb3Bkb3duIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtLTIgcGwtMiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogIm91dGxpbmUtd2FybmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJzcGxpdC1ocmVmIjogIiMiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IF92bS4kdCgiTGFuZyIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLmxhbmd1YWdlcywgZnVuY3Rpb24oZW50cnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBrZXk6IGVudHJ5LnRpdGxlIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJiLWRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlTG9jYWxlKGVudHJ5Lmxhbmd1YWdlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1sLTIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJmbGFnIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlzbzogZW50cnkuZmxhZywgc3F1YXJlZDogZmFsc2UgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhlbnRyeS50aXRsZSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXQogICAgKSwKICAgIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAibWFzdGhlYWQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJzZWN0aW9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICJyZ2JhKDAsIDAsIDAsIDAuOCkiLAogICAgICAgICAgICAgIHBhZGRpbmc6ICIyMHB4IiwKICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICI0cmVtIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1hc3RoZWFkLXN1YmhlYWRpbmciIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgiV1RESUxTQSIpKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSBidG4teGwgdGV4dC11cHBlcmNhc2UiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NlcnZpY2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLiR0KCJ0ZWxsTWVNb3JlIikpKV0KICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInBhZ2Utc2VjdGlvbiIsIGF0dHJzOiB7IGlkOiAic2VydmljZXMiIH0gfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLWhlYWRpbmcgdGV4dC11cHBlcmNhc2UiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoIlNBQ1MiKSkpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLXN1YmhlYWRpbmcgdGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgiU0FDU1RYVCIpKSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInJvdW5kZWQtY2lyY2xlIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTcwcHgiLAogICAgICAgICAgICAgICAgd2lkdGg6ICIxNzBweCIsCiAgICAgICAgICAgICAgICBzcmM6IF92bS5pbWdBUywKICAgICAgICAgICAgICAgIGFsdDogImFsdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAibXktMyIgfSwgW192bS5fdihfdm0uX3MoX3ZtLiR0KCJhZG4iKSkpXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgiYWRudHh0IikpKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhlaWdodDogIjE3MHB4IiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTcwcHgiLAogICAgICAgICAgICAgICAgc3JjOiBfdm0uaW1nMSwKICAgICAgICAgICAgICAgIGFsdDogImFsdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAibXktMyIgfSwgW192bS5fdihfdm0uX3MoX3ZtLiR0KCJSYWQiKSkpXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgiUmFkdHh0IikpKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhlaWdodDogIjE3MHB4IiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTcwcHgiLAogICAgICAgICAgICAgICAgc3JjOiBfdm0uaW1nU2MsCiAgICAgICAgICAgICAgICBhbHQ6ICJhbHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogIm15LTMiIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS4kdCgiU0FDUyIpKSldKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KCJTQUNTVFhUMSIpKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgeyBzdGF0aWNDbGFzczogInBhZ2Utc2VjdGlvbiBiZy1saWdodCIsIGF0dHJzOiB7IGlkOiAicHJvZHVpdHMiIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICB0eXBlb2YgX3ZtLnByb2R1Y3RzICE9PSAidW5kZWZpbmVkIiAmJiBfdm0ucHJvZHVjdHMgIT0gbnVsbAogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm93IiB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wcm9kdWN0cywgZnVuY3Rpb24ocHJvZHVjdCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBrZXk6IHByb2R1Y3QuaWQsIHN0YXRpY0NsYXNzOiAiY29sLWxnLTQgY29sLXNtLTYgbWItNCIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBvcnRmb2xpby1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgzLCB0cnVlKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8tY2FwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicG9ydGZvbGlvLWNhcHRpb24taGVhZGluZyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKHByb2R1Y3QubmFtZSkpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvcnRmb2xpby1jYXB0aW9uLXN1YmhlYWRpbmcgdGV4dC1tdXRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEaWVzZWwiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXSkKICAgICAgXQogICAgKSwKICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInBhZ2Utc2VjdGlvbiIsIGF0dHJzOiB7IGlkOiAiYWJvdXQiIH0gfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLWhlYWRpbmcgdGV4dC11cHBlcmNhc2UiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoIkFidCIpKSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lIiB9LCBbCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtaW1hZ2UiIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNzBweCIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTcwcHgiLAogICAgICAgICAgICAgICAgICBzcmM6IF92bS5pbWdCLAogICAgICAgICAgICAgICAgICBhbHQ6ICIuLi4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCI+IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtcGFuZWwiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLWhlYWRpbmciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJzdWJoZWFkaW5nIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KCJPSEIiKSkpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgidE9IQiIpKSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLWludmVydGVkIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtaW1hZ2UiIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNzBweCIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTcwcHgiLAogICAgICAgICAgICAgICAgICBzcmM6IF92bS5pbWdTYywKICAgICAgICAgICAgICAgICAgYWx0OiAiLi4uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLXBhbmVsIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aW1lbGluZS1oZWFkaW5nIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAic3ViaGVhZGluZyIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgiQUFCIikpKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLWJvZHkiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoInRBQUIiKSkgKyAiICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aW1lbGluZS1pbWFnZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInJvdW5kZWQtY2lyY2xlIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE3MHB4IiwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxNzBweCIsCiAgICAgICAgICAgICAgICAgIHNyYzogX3ZtLmltZ1RTLAogICAgICAgICAgICAgICAgICBhbHQ6ICIuLi4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtcGFuZWwiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLWhlYWRpbmciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJzdWJoZWFkaW5nIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KCJURlMiKSkpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgidFRGUyIpKSArICIgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLWludmVydGVkIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtaW1hZ2UiIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNzBweCIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTcwcHgiLAogICAgICAgICAgICAgICAgICBzcmM6IF92bS5pbWdQVEUsCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aW1lbGluZS1wYW5lbCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGltZWxpbmUtaGVhZGluZyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInN1YmhlYWRpbmciIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoIlBURSIpKSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aW1lbGluZS1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KCJ0UFRFIikpICsgIiAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX20oNCkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfdm0uX20oNSksCiAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJwYWdlLXNlY3Rpb24iLCBhdHRyczogeyBpZDogImNvbnRhY3QiIH0gfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLWhlYWRpbmcgdGV4dC11cHBlcmNhc2UiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoImN0dSIpKSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tc3ViaGVhZGluZyB0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KCJjdHV0eHQiKSkpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fbSg2KQogICAgICBdKQogICAgXSksCiAgICBfdm0uX20oNyksCiAgICBfdm0uX20oOCksCiAgICBfdm0uX20oOSksCiAgICBfdm0uX20oMTApLAogICAgX3ZtLl9tKDExKSwKICAgIF92bS5fbSgxMiksCiAgICBfdm0uX20oMTMpCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJhIiwKICAgICAgeyBzdGF0aWNDbGFzczogIm5hdmJhci1icmFuZCIsIGF0dHJzOiB7IGhyZWY6ICIjcGFnZS10b3AiIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9uYXZiYXItbG9nby5qcGciKSwgYWx0OiAiLi4uIiB9CiAgICAgICAgfSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImJ1dHRvbiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm5hdmJhci10b2dnbGVyIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAiZGF0YS1icy10b2dnbGUiOiAiY29sbGFwc2UiLAogICAgICAgICAgImRhdGEtYnMtdGFyZ2V0IjogIiNuYXZiYXJSZXNwb25zaXZlIiwKICAgICAgICAgICJhcmlhLWNvbnRyb2xzIjogIm5hdmJhclJlc3BvbnNpdmUiLAogICAgICAgICAgImFyaWEtZXhwYW5kZWQiOiAiZmFsc2UiLAogICAgICAgICAgImFyaWEtbGFiZWwiOiAiVG9nZ2xlIG5hdmlnYXRpb24iCiAgICAgICAgfQogICAgICB9LAogICAgICBbX3ZtLl92KCIgTWVudSAiKSwgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWJhcnMgbXMtMSIgfSldCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24taGVhZGluZyB0ZXh0LXVwcGVyY2FzZSIgfSwgWwogICAgICAgIF92bS5fdigiUHJvZHVpdHMiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJhIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAicG9ydGZvbGlvLWxpbmsiLAogICAgICAgIGF0dHJzOiB7ICJkYXRhLWJzLXRvZ2dsZSI6ICJtb2RhbCIsIGhyZWY6ICIjcG9ydGZvbGlvTW9kYWwyIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBvcnRmb2xpby1ob3ZlciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8taG92ZXItY29udGVudCIgfSwgWwogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtcGx1cyBmYS0zeCIgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3BvcnRmb2xpby8yLmpwZyIpLCBhbHQ6ICIuLi4iIH0KICAgICAgICB9KQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJ0aW1lbGluZS1pbnZlcnRlZCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpbWVsaW5lLWltYWdlIiB9LCBbCiAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgX3ZtLl92KCIgQmUgUGFydCAiKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCIgT2YgT3VyICIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIiBTdG9yeSEgIikKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgeyBzdGF0aWNDbGFzczogInBhZ2Utc2VjdGlvbiBiZy1saWdodCIsIGF0dHJzOiB7IGlkOiAidGVhbSIgfSB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24taGVhZGluZyB0ZXh0LXVwcGVyY2FzZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiU1VQUE9SVCBBTkQgQ1VTVE9NRVIgU0VSVklDRSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlYW0tbWVtYmVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm14LWF1dG8gcm91bmRlZC1jaXJjbGUiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy90ZWFtLzEuanBnIiksIGFsdDogIi4uLiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJQYXJ2ZWVuIEFuYW5kIildKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMZWFkIERlc2lnbmVyIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtdHdpdHRlciIgfSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtZmFjZWJvb2stZiIgfSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtbGlua2VkaW4taW4iIH0pXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy00IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZWFtLW1lbWJlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJteC1hdXRvIHJvdW5kZWQtY2lyY2xlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvdGVhbS8yLmpwZyIpLCBhbHQ6ICIuLi4iIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiRGlhbmEgUGV0ZXJzZW4iKV0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkxlYWQgTWFya2V0ZXIiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWRhcmsgYnRuLXNvY2lhbCBteC0yIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyEiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhYiBmYS10d2l0dGVyIiB9KV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWRhcmsgYnRuLXNvY2lhbCBteC0yIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyEiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhYiBmYS1mYWNlYm9vay1mIiB9KV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWRhcmsgYnRuLXNvY2lhbCBteC0yIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyEiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhYiBmYS1saW5rZWRpbi1pbiIgfSldCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlYW0tbWVtYmVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm14LWF1dG8gcm91bmRlZC1jaXJjbGUiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy90ZWFtLzMuanBnIiksIGFsdDogIi4uLiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJMYXJyeSBQYXJrZXIiKV0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkxlYWQgRGV2ZWxvcGVyIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtdHdpdHRlciIgfSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtZmFjZWJvb2stZiIgfSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtbGlua2VkaW4taW4iIH0pXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTggbXgtYXV0byB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImxhcmdlIHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIlNpbmNlIGl0cyBjcmVhdGlvbiB0aGUgY29tcGFueSBoYXMgYmVlbiB3b3JraW5nIGluIGNvbGxhYm9yYXRpb24gd2l0aCBhIHdpZGUgcmFuZ2Ugb2YgcGFydG5lcnMuIEl0IGhhcyBtb3JlIHRlbiBkaXN0cmlidXRvcnMgYWNyb3NzIHRoZSBjb21wYW55LiBGb3Igb3ZlciAyMCB5ZWFycywgaXQgaGFzIGRldmVsb3BwZWQgcmVsYXRpb25zaGlwIHdpdGggUmVkYXQgU3BBLCBEaWVzZWwgQ29tcG9uZW50cywgQ2VudHJhbCBUdXJib3MsIFNvdXRoZWFzdCBQb3dlciBTeXN0ZW1zIGFuZCBpcyB0aGUgcmVwcmVzZW50YXRpdmUgUm9iZXJ0IEJvc2NoLCBaZXhlbCwgU3RhbmFkeW5lIGluIEhhaXRpLiBGdXJ0aGVybW9yZSwgdGhlIGNvbXBhbnkgaXMgYW4gYWN0aXZlIG1lbWJlciBvZiB0aGUgd29ybGR3aWRlIGRpZXNlbCBzcGVjaWFsaXN0IGFzc29jaWF0aW9uIChBRFMpLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZm9ybSIsCiAgICAgIHsgYXR0cnM6IHsgaWQ6ICJjb250YWN0Rm9ybSIsICJkYXRhLXNiLWZvcm0tYXBpLXRva2VuIjogIkFQSV9UT0tFTiIgfSB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgYWxpZ24taXRlbXMtc3RyZXRjaCBtYi01IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGlkOiAibmFtZSIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJZb3VyIE5hbWUgKiIsCiAgICAgICAgICAgICAgICAgICJkYXRhLXNiLXZhbGlkYXRpb25zIjogInJlcXVpcmVkIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW52YWxpZC1mZWVkYmFjayIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXNiLWZlZWRiYWNrIjogIm5hbWU6cmVxdWlyZWQiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJBIG5hbWUgaXMgcmVxdWlyZWQuIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaWQ6ICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiWW91ciBFbWFpbCAqIiwKICAgICAgICAgICAgICAgICAgImRhdGEtc2ItdmFsaWRhdGlvbnMiOiAicmVxdWlyZWQsZW1haWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnZhbGlkLWZlZWRiYWNrIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtc2ItZmVlZGJhY2siOiAiZW1haWw6cmVxdWlyZWQiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJBbiBlbWFpbCBpcyByZXF1aXJlZC4iKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW52YWxpZC1mZWVkYmFjayIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXNiLWZlZWRiYWNrIjogImVtYWlsOmVtYWlsIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiRW1haWwgaXMgbm90IHZhbGlkLiIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBtYi1tZC0wIiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaWQ6ICJwaG9uZSIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZWwiLAogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIllvdXIgUGhvbmUgKiIsCiAgICAgICAgICAgICAgICAgICJkYXRhLXNiLXZhbGlkYXRpb25zIjogInJlcXVpcmVkIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW52YWxpZC1mZWVkYmFjayIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXNiLWZlZWRiYWNrIjogInBob25lOnJlcXVpcmVkIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiQSBwaG9uZSBudW1iZXIgaXMgcmVxdWlyZWQuIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIGZvcm0tZ3JvdXAtdGV4dGFyZWEgbWItbWQtMCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogIm1lc3NhZ2UiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiWW91ciBNZXNzYWdlICoiLAogICAgICAgICAgICAgICAgICAgICJkYXRhLXNiLXZhbGlkYXRpb25zIjogInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW52YWxpZC1mZWVkYmFjayIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtc2ItZmVlZGJhY2siOiAibWVzc2FnZTpyZXF1aXJlZCIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBIG1lc3NhZ2UgaXMgcmVxdWlyZWQuIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1ub25lIiwgYXR0cnM6IHsgaWQ6ICJzdWJtaXRTdWNjZXNzTWVzc2FnZSIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIHRleHQtd2hpdGUgbWItMyIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZnctYm9sZGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkZvcm0gc3VibWlzc2lvbiBzdWNjZXNzZnVsISIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgVG8gYWN0aXZhdGUgdGhpcyBmb3JtLCBzaWduIHVwIGF0ICIpLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3N0YXJ0Ym9vdHN0cmFwLmNvbS9zb2x1dGlvbi9jb250YWN0LWZvcm1zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiaHR0cHM6Ly9zdGFydGJvb3RzdHJhcC5jb20vc29sdXRpb24vY29udGFjdC1mb3JtcyIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1ub25lIiwgYXR0cnM6IHsgaWQ6ICJzdWJtaXRFcnJvck1lc3NhZ2UiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciB0ZXh0LWRhbmdlciBtYi0zIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJFcnJvciBzZW5kaW5nIG1lc3NhZ2UhIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGJ0bi14bCAiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAic3VibWl0QnV0dG9uIiwgdHlwZTogInN1Ym1pdCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJTZW5kIE1lc3NhZ2UiKV0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJmb290ZXIiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyIHB5LTQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQgdGV4dC1sZy1zdGFydCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkNvcHlyaWdodCDCqSBZb3VyIFdlYnNpdGUgMjAyMSIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQgbXktMyBteS1sZy0wIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tZGFyayBidG4tc29jaWFsIG14LTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLXR3aXR0ZXIiIH0pXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWRhcmsgYnRuLXNvY2lhbCBteC0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjISIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhYiBmYS1mYWNlYm9vay1mIiB9KV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1kYXJrIGJ0bi1zb2NpYWwgbXgtMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyEiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtbGlua2VkaW4taW4iIH0pXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQgdGV4dC1sZy1lbmQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGluay1kYXJrIHRleHQtZGVjb3JhdGlvbi1ub25lIG1lLTMiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJQcml2YWN5IFBvbGljeSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsaW5rLWRhcmsgdGV4dC1kZWNvcmF0aW9uLW5vbmUiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMhIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJUZXJtcyBvZiBVc2UiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8tbW9kYWwgbW9kYWwgZmFkZSIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGlkOiAicG9ydGZvbGlvTW9kYWwxIiwKICAgICAgICAgIHRhYmluZGV4OiAiLTEiLAogICAgICAgICAgcm9sZTogImRpYWxvZyIsCiAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWRpYWxvZyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jb250ZW50IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xvc2UtbW9kYWwiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9jbG9zZS1pY29uLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIkNsb3NlIG1vZGFsIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy04IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IE5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIml0ZW0taW50cm8gdGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ci4iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCBkLWJsb2NrIG14LWF1dG8iLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvLzEuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlVzZSB0aGlzIGFyZWEgdG8gZGVzY3JpYmUgeW91ciBwcm9qZWN0LiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gRXN0IGJsYW5kaXRpaXMgZG9sb3JlbSBjdWxwYSBpbmNpZHVudCBtaW51cyBkaWduaXNzaW1vcyBkZXNlcnVudCByZXBlbGxhdCBhcGVyaWFtIHF1YXNpIHN1bnQgb2ZmaWNpYSBleHBlZGl0YSBiZWF0YWUgY3VwaWRpdGF0ZSwgbWFpb3JlcyByZXB1ZGlhbmRhZSwgbm9zdHJ1bSwgcmVpY2llbmRpcyBmYWNlcmUgbmVtbyEiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImxpc3QtaW5saW5lIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDbGllbnQ6IildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgVGhyZWFkcyAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDYXRlZ29yeToiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBJbGx1c3RyYXRpb24gIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXhsIHRleHQtdXBwZXJjYXNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIsIHR5cGU6ICJidXR0b24iIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS10aW1lcyBtZS0xIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ2xvc2UgUHJvamVjdCAiKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInBvcnRmb2xpby1tb2RhbCBtb2RhbCBmYWRlIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgaWQ6ICJwb3J0Zm9saW9Nb2RhbDIiLAogICAgICAgICAgdGFiaW5kZXg6ICItMSIsCiAgICAgICAgICByb2xlOiAiZGlhbG9nIiwKICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZS1tb2RhbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyAiZGF0YS1icy1kaXNtaXNzIjogIm1vZGFsIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL2Nsb3NlLWljb24uc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiQ2xvc2UgbW9kYWwiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgTmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaXRlbS1pbnRybyB0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIGQtYmxvY2sgbXgtYXV0byIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vMi5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiLi4uIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlIHRoaXMgYXJlYSB0byBkZXNjcmliZSB5b3VyIHByb2plY3QuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBFc3QgYmxhbmRpdGlpcyBkb2xvcmVtIGN1bHBhIGluY2lkdW50IG1pbnVzIGRpZ25pc3NpbW9zIGRlc2VydW50IHJlcGVsbGF0IGFwZXJpYW0gcXVhc2kgc3VudCBvZmZpY2lhIGV4cGVkaXRhIGJlYXRhZSBjdXBpZGl0YXRlLCBtYWlvcmVzIHJlcHVkaWFuZGFlLCBub3N0cnVtLCByZWljaWVuZGlzIGZhY2VyZSBuZW1vISIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibGlzdC1pbmxpbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNsaWVudDoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBFeHBsb3JlICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNhdGVnb3J5OiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEdyYXBoaWMgRGVzaWduICIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGJ0bi14bCB0ZXh0LXVwcGVyY2FzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLWJzLWRpc21pc3MiOiAibW9kYWwiLCB0eXBlOiAiYnV0dG9uIiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtdGltZXMgbWUtMSIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIENsb3NlIFByb2plY3QgIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8tbW9kYWwgbW9kYWwgZmFkZSIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGlkOiAicG9ydGZvbGlvTW9kYWwzIiwKICAgICAgICAgIHRhYmluZGV4OiAiLTEiLAogICAgICAgICAgcm9sZTogImRpYWxvZyIsCiAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWRpYWxvZyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jb250ZW50IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xvc2UtbW9kYWwiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9jbG9zZS1pY29uLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIkNsb3NlIG1vZGFsIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy04IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IE5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIml0ZW0taW50cm8gdGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ci4iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCBkLWJsb2NrIG14LWF1dG8iLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvLzMuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlVzZSB0aGlzIGFyZWEgdG8gZGVzY3JpYmUgeW91ciBwcm9qZWN0LiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gRXN0IGJsYW5kaXRpaXMgZG9sb3JlbSBjdWxwYSBpbmNpZHVudCBtaW51cyBkaWduaXNzaW1vcyBkZXNlcnVudCByZXBlbGxhdCBhcGVyaWFtIHF1YXNpIHN1bnQgb2ZmaWNpYSBleHBlZGl0YSBiZWF0YWUgY3VwaWRpdGF0ZSwgbWFpb3JlcyByZXB1ZGlhbmRhZSwgbm9zdHJ1bSwgcmVpY2llbmRpcyBmYWNlcmUgbmVtbyEiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImxpc3QtaW5saW5lIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDbGllbnQ6IildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRmluaXNoICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNhdGVnb3J5OiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIElkZW50aXR5ICIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGJ0bi14bCB0ZXh0LXVwcGVyY2FzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLWJzLWRpc21pc3MiOiAibW9kYWwiLCB0eXBlOiAiYnV0dG9uIiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtdGltZXMgbWUtMSIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIENsb3NlIFByb2plY3QgIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8tbW9kYWwgbW9kYWwgZmFkZSIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGlkOiAicG9ydGZvbGlvTW9kYWw0IiwKICAgICAgICAgIHRhYmluZGV4OiAiLTEiLAogICAgICAgICAgcm9sZTogImRpYWxvZyIsCiAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWRpYWxvZyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jb250ZW50IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xvc2UtbW9kYWwiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9jbG9zZS1pY29uLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIkNsb3NlIG1vZGFsIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy04IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IE5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIml0ZW0taW50cm8gdGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ci4iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCBkLWJsb2NrIG14LWF1dG8iLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvcG9ydGZvbGlvLzQuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlVzZSB0aGlzIGFyZWEgdG8gZGVzY3JpYmUgeW91ciBwcm9qZWN0LiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gRXN0IGJsYW5kaXRpaXMgZG9sb3JlbSBjdWxwYSBpbmNpZHVudCBtaW51cyBkaWduaXNzaW1vcyBkZXNlcnVudCByZXBlbGxhdCBhcGVyaWFtIHF1YXNpIHN1bnQgb2ZmaWNpYSBleHBlZGl0YSBiZWF0YWUgY3VwaWRpdGF0ZSwgbWFpb3JlcyByZXB1ZGlhbmRhZSwgbm9zdHJ1bSwgcmVpY2llbmRpcyBmYWNlcmUgbmVtbyEiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImxpc3QtaW5saW5lIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDbGllbnQ6IildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTGluZXMgIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ2F0ZWdvcnk6IildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQnJhbmRpbmcgIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXhsIHRleHQtdXBwZXJjYXNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIsIHR5cGU6ICJidXR0b24iIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS10aW1lcyBtZS0xIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ2xvc2UgUHJvamVjdCAiKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInBvcnRmb2xpby1tb2RhbCBtb2RhbCBmYWRlIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgaWQ6ICJwb3J0Zm9saW9Nb2RhbDUiLAogICAgICAgICAgdGFiaW5kZXg6ICItMSIsCiAgICAgICAgICByb2xlOiAiZGlhbG9nIiwKICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZS1tb2RhbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyAiZGF0YS1icy1kaXNtaXNzIjogIm1vZGFsIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL2Nsb3NlLWljb24uc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiQ2xvc2UgbW9kYWwiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgTmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaXRlbS1pbnRybyB0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIGQtYmxvY2sgbXgtYXV0byIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vNS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiLi4uIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlIHRoaXMgYXJlYSB0byBkZXNjcmliZSB5b3VyIHByb2plY3QuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBFc3QgYmxhbmRpdGlpcyBkb2xvcmVtIGN1bHBhIGluY2lkdW50IG1pbnVzIGRpZ25pc3NpbW9zIGRlc2VydW50IHJlcGVsbGF0IGFwZXJpYW0gcXVhc2kgc3VudCBvZmZpY2lhIGV4cGVkaXRhIGJlYXRhZSBjdXBpZGl0YXRlLCBtYWlvcmVzIHJlcHVkaWFuZGFlLCBub3N0cnVtLCByZWljaWVuZGlzIGZhY2VyZSBuZW1vISIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibGlzdC1pbmxpbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNsaWVudDoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBTb3V0aHdlc3QgIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ2F0ZWdvcnk6IildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgV2Vic2l0ZSBEZXNpZ24gIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXhsIHRleHQtdXBwZXJjYXNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIsIHR5cGU6ICJidXR0b24iIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS10aW1lcyBtZS0xIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ2xvc2UgUHJvamVjdCAiKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInBvcnRmb2xpby1tb2RhbCBtb2RhbCBmYWRlIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgaWQ6ICJwb3J0Zm9saW9Nb2RhbDYiLAogICAgICAgICAgdGFiaW5kZXg6ICItMSIsCiAgICAgICAgICByb2xlOiAiZGlhbG9nIiwKICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZS1tb2RhbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyAiZGF0YS1icy1kaXNtaXNzIjogIm1vZGFsIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL2Nsb3NlLWljb24uc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiQ2xvc2UgbW9kYWwiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgTmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaXRlbS1pbnRybyB0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIGQtYmxvY2sgbXgtYXV0byIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9wb3J0Zm9saW8vNi5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiLi4uIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlIHRoaXMgYXJlYSB0byBkZXNjcmliZSB5b3VyIHByb2plY3QuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBFc3QgYmxhbmRpdGlpcyBkb2xvcmVtIGN1bHBhIGluY2lkdW50IG1pbnVzIGRpZ25pc3NpbW9zIGRlc2VydW50IHJlcGVsbGF0IGFwZXJpYW0gcXVhc2kgc3VudCBvZmZpY2lhIGV4cGVkaXRhIGJlYXRhZSBjdXBpZGl0YXRlLCBtYWlvcmVzIHJlcHVkaWFuZGFlLCBub3N0cnVtLCByZWljaWVuZGlzIGZhY2VyZSBuZW1vISIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibGlzdC1pbmxpbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNsaWVudDoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBXaW5kb3cgIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ2F0ZWdvcnk6IildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUGhvdG9ncmFwaHkgIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXhsIHRleHQtdXBwZXJjYXNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYnMtZGlzbWlzcyI6ICJtb2RhbCIsIHR5cGU6ICJidXR0b24iIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS10aW1lcyBtZS0xIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ2xvc2UgUHJvamVjdCAiKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}