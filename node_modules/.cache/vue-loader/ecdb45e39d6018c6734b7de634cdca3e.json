{"remainingRequest":"/home/nanouni/DilsaProject/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/nanouni/DilsaProject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nanouni/DilsaProject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nanouni/DilsaProject/src/components/Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"/home/nanouni/DilsaProject/src/components/Home.vue","mtime":1634079960606},{"path":"/home/nanouni/DilsaProject/node_modules/cache-loader/dist/cjs.js","mtime":1634074391745},{"path":"/home/nanouni/DilsaProject/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634074397369},{"path":"/home/nanouni/DilsaProject/node_modules/cache-loader/dist/cjs.js","mtime":1634074391745},{"path":"/home/nanouni/DilsaProject/node_modules/vue-loader/lib/index.js","mtime":1634074395921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}